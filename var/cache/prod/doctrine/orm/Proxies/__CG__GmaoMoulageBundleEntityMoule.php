<?php

namespace Proxies\__CG__\Gmao\MoulageBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Moule extends \Gmao\MoulageBundle\Entity\Moule implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'id', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'nomMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'designation', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'planMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'planMoulePrehension', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'poidsMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'lastNbrCycle', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'dateDeplacement', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'etatMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'empreintes', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'alveoles'];
        }

        return ['__isInitialized__', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'id', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'nomMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'designation', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'planMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'planMoulePrehension', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'poidsMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'lastNbrCycle', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'dateDeplacement', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'etatMoule', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'empreintes', '' . "\0" . 'Gmao\\MoulageBundle\\Entity\\Moule' . "\0" . 'alveoles'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Moule $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomMoule($nomMoule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomMoule', [$nomMoule]);

        return parent::setNomMoule($nomMoule);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomMoule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomMoule', []);

        return parent::getNomMoule();
    }

    /**
     * {@inheritDoc}
     */
    public function setDesignation($designation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDesignation', [$designation]);

        return parent::setDesignation($designation);
    }

    /**
     * {@inheritDoc}
     */
    public function getDesignation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDesignation', []);

        return parent::getDesignation();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlanMoule($planMoule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlanMoule', [$planMoule]);

        return parent::setPlanMoule($planMoule);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlanMoule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlanMoule', []);

        return parent::getPlanMoule();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlanMoulePrehension($planMoulePrehension)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlanMoulePrehension', [$planMoulePrehension]);

        return parent::setPlanMoulePrehension($planMoulePrehension);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlanMoulePrehension()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlanMoulePrehension', []);

        return parent::getPlanMoulePrehension();
    }

    /**
     * {@inheritDoc}
     */
    public function setPoidsMoule($poidsMoule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPoidsMoule', [$poidsMoule]);

        return parent::setPoidsMoule($poidsMoule);
    }

    /**
     * {@inheritDoc}
     */
    public function getPoidsMoule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPoidsMoule', []);

        return parent::getPoidsMoule();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastNbrCycle($lastNbrCycle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastNbrCycle', [$lastNbrCycle]);

        return parent::setLastNbrCycle($lastNbrCycle);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastNbrCycle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastNbrCycle', []);

        return parent::getLastNbrCycle();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDeplacement($dateDeplacement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDeplacement', [$dateDeplacement]);

        return parent::setDateDeplacement($dateDeplacement);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDeplacement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDeplacement', []);

        return parent::getDateDeplacement();
    }

    /**
     * {@inheritDoc}
     */
    public function setEtatMoule($etatMoule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEtatMoule', [$etatMoule]);

        return parent::setEtatMoule($etatMoule);
    }

    /**
     * {@inheritDoc}
     */
    public function getEtatMoule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEtatMoule', []);

        return parent::getEtatMoule();
    }

    /**
     * {@inheritDoc}
     */
    public function addEmpreinte(\Gmao\MoulageBundle\Entity\Empreinte $empreinte)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEmpreinte', [$empreinte]);

        return parent::addEmpreinte($empreinte);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEmpreinte(\Gmao\MoulageBundle\Entity\Empreinte $empreinte)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEmpreinte', [$empreinte]);

        return parent::removeEmpreinte($empreinte);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmpreintes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmpreintes', []);

        return parent::getEmpreintes();
    }

    /**
     * {@inheritDoc}
     */
    public function addAlveole(\Gmao\MoulageBundle\Entity\Alveole $alveole)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAlveole', [$alveole]);

        return parent::addAlveole($alveole);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAlveole(\Gmao\MoulageBundle\Entity\Alveole $alveole)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAlveole', [$alveole]);

        return parent::removeAlveole($alveole);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlveoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlveoles', []);

        return parent::getAlveoles();
    }

}
