
<div class="well">
  <form method="post">

    {{ form_errors(form) }}

    {{ form_rest(form) }}
    
        {{ form_row(form.defauts_fnc) }}
    <a href="#" id="add_defaut" class="btn btn-default">Ajouter une empreinte</a>
    
    <button type="submit" class="btn btn-success" >Valider</button>
  </form>
</div>


{% block javascriptsss %}
	<script type="text/javascript">
		var $moule = $('#fnc_moule_fnc');
		// When sport gets selected ...
		$moule.change(function() {
		  //... retrieve the corresponding form.
	  	var $form = $(this).closest('form');
		  //Simulate form data, but only include the selected sport value.
	  	var data = {};
	  	data[$moule.attr('name')] = $moule.val();
	  	// Submit data via AJAX to the form's action path.
	  	$.ajax({
	    	url : $form.attr('action'),
	    	type: $form.attr('method'),
	    	data : data,
	    	success: function(html) {

		    	
	      	// Replace current position field ...
	      		$('#fnc_presse_fnc').replaceWith(
	        	// ... with the returned one from the AJAX response.
	        	$(html).find('#fnc_presse_fnc')
	      		);
		      //Position field now displays the appropriate positions.

			      // Replace current position field ...
	      		$('#fnc_reference_fnc').replaceWith(
	        	// ... with the returned one from the AJAX response.
	        	$(html).find('#fnc_reference_fnc')
	      		);
		      //Position field now displays the appropriate positions.
	    	}
	  	});
		});
	</script>



	
	
	
	
	
	
	
	

{# On charge la bibliothèque jQuery. Ici, je la prends depuis le site jquery.com,mais si vous l'avez en local, changez simplement l'adresse. #}
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
{# Voici le script en question : #}
<script type="text/javascript">
$(document).ready(function() {
// On récupère la balise <div> en question qui contient l'attribut « data-prototype » qui nous intéresse.
var $container = $('div#fnc_defauts_fnc');

// On définit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
var index = $container.find(':input').length;

// On ajoute un nouveau champ à chaque clic sur le lien d'ajout.
$('#add_defaut').click(function(e) {
  addDefaut($container);

  e.preventDefault(); // évite qu'un # apparaisse dans l'URL
  return false;
});

// On ajoute un premier champ automatiquement s'il n'en existe pas déjà un (cas d'une nouvelle annonce par exemple).
if (index == 0) {
  addDefaut($container);
} else {
  // S'il existe déjà des catégories, on ajoute un lien de suppression pour chacune d'entre elles
  $container.children('div').each(function() {
    addDeleteLink($(this));
  });
}

// La fonction qui ajoute un formulaire CategoryType
function addDefaut($container) {
  // Dans le contenu de l'attribut « data-prototype », on remplace :
  // - le texte "__name__label__" qu'il contient par le label du champ
  // - le texte "__name__" qu'il contient par le numéro du champ
  var template = $container.attr('data-prototype')
    .replace(/__name__label__/g, 'Defaut n°' + (index+1))
    .replace(/__name__/g,        index)
  ;

  // On crée un objet jquery qui contient ce template
  var $prototype = $(template);

  // On ajoute au prototype un lien pour pouvoir supprimer la catégorie
  addDeleteLink($prototype);

  // On ajoute le prototype modifié à la fin de la balise <div>
  $container.append($prototype);

  // Enfin, on incrémente le compteur pour que le prochain ajout se fasse avec un autre numéro
  index++;
}

// La fonction qui ajoute un lien de suppression d'une catégorie
function addDeleteLink($prototype) {
  // Création du lien
  var $deleteLink = $('<a href="#" class="btn btn-danger">Supprimer</a>');

  // Ajout du lien
  $prototype.append($deleteLink);

  // Ajout du listener sur le clic du lien pour effectivement supprimer la catégorie
  $deleteLink.click(function(e) {
    $prototype.remove();

    e.preventDefault(); // évite qu'un # apparaisse dans l'URL
    return false;
  });
}
});

</script>
	
	
{% endblock %}


